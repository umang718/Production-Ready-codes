

CanSum 

#include <iostream>
#include<bits/stdc++.h>
using namespace std;


// Recursive Solution
bool util(int v[], int targetsum, int n)
{
    if(targetsum == 0)
        return true;
    if(n == 0)
        return false;
    if(v[n-1] > targetsum)
        util(v,targetsum,n-1);
    
    return util(v,targetsum,n-1) || util(v,targetsum - v[n-1], n);
    
}

bool util2(int a[], int, int);

int main() 
{
	// your code goes here
	
	int a[] = {1,3,5,8,2};
	
	
	int targetsum = 10;
	int n = sizeof(a) / sizeof(a[0]);
	bool flag = util2(a,targetsum, n);
	if(flag)
	cout<<"True"<<endl;
	else 
	cout<<"FALSE";
	
	
	
	return 0;
}


// We used dp array to avoid already computed recursive calls. 

bool util2(int v[], int targetsum, int n)
{
    int t[n+1][targetsum+1];
    
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=targetsum;j++)
        {
            if(i==0) // If sum is not 0 and set is empty,
            t[i][j]=false; // then answer is false
            if(j==0)   // If sum is 0, then answer is true
            t[i][j]=true;
        }
    }
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=targetsum;j++)
        {
            if(v[i-1] <= j)
            t[i][j]=((t[i][j-v[i-1]]) || (t[i-1][j]));
            else 
            t[i][j]=t[i-1][j];
        }
    }
    return t[n][targetsum];
    
    
}
