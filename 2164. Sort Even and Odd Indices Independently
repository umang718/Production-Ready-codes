2164. Sort Even and Odd Indices Independently

Problem Description : 


You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:

Sort the values at odd indices of nums in non-increasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.
Sort the values at even indices of nums in non-decreasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.
Return the array formed after rearranging the values of nums.


Solution : 

vector<int> sortEvenOdd(vector<int>& nums) 
{
    priority_queue<int> decreasingOrder;
    priority_queue<int,vector<int>, greater<int>> increasingOrder;

    for(int i=0;i<nums.size();i+=2)
    {
        increasingOrder.push(nums[i]);
    }

    for(int i=1;i<nums.size();i+=2)
    {
        decreasingOrder.push(nums[i]);
    }



    int k=0;
    while(k < nums.size())
    {
        if(k%2 == 0)
        {
            nums[k] = increasingOrder.top();
            increasingOrder.pop();
        }
        else 
        {
            nums[k] = decreasingOrder.top();
            decreasingOrder.pop();
        }
        k++;


    }
    return nums;

}
