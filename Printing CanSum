
Function to print can sum (Repetition not allowed) 

void util(int arr[], int n, vector<int> v,
{
	
	if (sum == 0) 
	{
		res.push_back(v);
		return;
	}

	
	if (n == 0)
		return;
	util(arr, n - 1, v, sum);  //excluding the n-1th element.
	v.push_back(arr[n - 1]);
	util(arr, n-1, v, sum - arr[n - 1]); //including the n-ith element.
}



Function to print can sum(repetition allowed)

    vector<vector<int>> res;
    
    void util(vector<int> &v, vector<int> candidates, int target, int index)
    {
        int sum=accumulate(v.begin(),v.end(),0);
        if(sum>target)
            return;
        if(sum==target)
        {
            res.push_back(v);
            return;
        }
        int n=candidates.size();
        for(int i=index;i<n;i++)
        {
            v.push_back(candidates[i]);
            util(v,candidates,target,i);
            v.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<int> v;
        int index=0;
        util(v,candidates,target,index);
        return res;
        
    }

