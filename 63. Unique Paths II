63. Unique Paths II

Problem Description : 

You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

Solution : 

int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) 
    {
        int rows=obstacleGrid.size();
        
        int cols = obstacleGrid[0].size();
        
        vector<vector<int>> previous(rows+1,vector<int>(cols+1,0));
        
        previous[0][1]=1;
        
        for(int i=1;i<=rows;i++)
        {
            for(int j=1;j<=cols;j++)
            {
                if(!obstacleGrid[i-1][j-1])
                {
                    previous[i][j] = previous[i][j-1] + previous[i-1][j];
                }
            }
        }
        
        return previous[rows][cols];
        
    }
    
    Time Complexity : O(n^2);
